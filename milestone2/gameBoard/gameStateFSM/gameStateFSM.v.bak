module gameStateFSM(
    input clk,
    input resetn,
    input [2: 0] go,
	input gameOver,
	output reg drawGrid, drawEZ, drawNORMAL, drawHARD, inGame, clear
);
	 
	reg [3: 0] current_state, next_state;
	reg [7:0] counter;
	reg [3:0] slc; // slower counter
	reg [2:0] stc; // slowest counter
	reg [5:0] flag, prev;

    
    localparam DRAW_GRID = 4'd0,
					DRAW_NUM_WAIT = 4'd1,
					DRAW_EZ = 4'd2,
					DRAW_NORMAL = 4'd3,
					DRAW_HARD = 4'd4,
					GAME_START = 4'd5,
					IN_GAME = 4'd6,
					GAME_OVER = 4'd7,
					CLEAR = 4'd8;
					
	always @(posedge clk)
	begin
		if (resetn == 0 || flag != prev)
			begin
				counter <= 0;
				slc <= 0;
				stc <= 0;
				prev <= flag;
			end
		else
			begin
				if (counter == 8'd200 && slc != 4'd15)
					begin
						counter <= 0;
						slc <= slc + 1;
					end
				else if (counter == 8'd200 && slc == 4'd15)
					begin
						counter <= 0;
						slc <= 0;
						stc <= stc + 1;
					end
				else
					begin
						counter <= counter + 1;
						flag <= {drawGrid, drawEZ, drawNORMAL, drawHARD, inGame, clear};
						prev <= flag;
					end
			end
	end
	
	always@(*)
   begin
		case (current_state)
			DRAW_GRID:
				begin
					if (slc == 4'd15)
						next_state = DRAW_NUM_WAIT;						
					else
						next_state = DRAW_GRID;
				end
			DRAW_NUM_WAIT:
				begin
					if (go == 3'b011)
						begin
							next_state = DRAW_EZ;
						end
					else if (go == 3'b001)
						begin
							next_state = DRAW_NORMAL;
						end
					else if (go == 3'b100)
						begin
							next_state = DRAW_HARD;
						end
					else
						next_state = DRAW_NUM_WAIT;						
				end
			DRAW_EZ:
				begin
					if (slc == 4'd15)
						next_state = GAME_START;
					else
						next_state = DRAW_EZ;
				end
			DRAW_NORMAL:
				begin
					if (slc == 4'd15)
						next_state = GAME_START;
					else
						next_state = DRAW_NORMAL;
				end
			DRAW_HARD:
				begin
					if (slc == 4'd15)
						next_state = GAME_START;
					else
						next_state = DRAW_HARD;
				end
			GAME_START:
				begin
					if (go != 3'b000)
						next_state = IN_GAME;
					else
						next_state = GAME_START;
				end
			IN_GAME: next_state = gameOver ? GAME_OVER : IN_GAME;
			GAME_OVER:
				begin
					if (go != 3'b000)
						begin
							next_state = CLEAR;
						end
					else
						next_state = GAME_OVER;
				end
			CLEAR:
				begin
					if (stc == 3'd5)
						begin
							next_state = DRAW_GRID;
						end
					else
						next_state = CLEAR;
				end
		endcase
	end
	
	always@(posedge clk)
		begin
			if(!resetn)
				current_state <= CLEAR;
			else
				current_state <= next_state;
		end
	
	always @(*)
		begin
			drawGrid = 1'b0;
			drawEZ = 1'b0;
			drawNORMAL = 1'b0;
			drawHARD = 1'b0;
			inGame = 1'b0;
			clear = 1'b0;
			
			case (current_state)
				DRAW_GRID:
					begin
						clear = 1'b0;
						drawGrid = 1'b1;
					end
				DRAW_NUM_WAIT:
					begin
						drawGrid = 1'b0;
					end
				DRAW_EZ:
					begin
						drawEZ = 1'b1;
					end
				DRAW_NORMAL:
					begin
						drawNORMAL = 1'b1;
					end
				DRAW_HARD:
					begin
						drawHARD = 1'b1;
					end
				GAME_START:
					begin
						drawEZ = 1'b0;
						drawNORMAL = 1'b0;
						drawHARD = 1'b0;
					end
				IN_GAME:
					begin
						inGame = 1'b1;
					end
				GAME_OVER:
					begin
						inGame = 1'b0;
					end
				CLEAR:
					begin
						drawGrid = 1'b0;
						drawEZ = 1'b0;
						drawNORMAL = 1'b0;
						drawHARD = 1'b0;
						inGame = 1'b0;
						clear = 1'b1;
					end
			endcase
		end
endmodule